{"version":3,"sources":["webpack:///./src/templates/release.module.css","webpack:///./src/templates/release.js"],"names":["module","exports","ReleaseTemplate","data","location","React","useState","isVertical","setIsVertical","containerRef","useRef","useEffect","current","getLayoutDimensions","rect","getBoundingClientRect","height","width","window","addEventListener","removeEventListener","post","markdownRemark","siteTitle","site","siteMetadata","title","image","allFile","edges","find","img","node","name","frontmatter","coverImg","theme","showName","color","ref","className","releaseStyle","container","date","albumType","content","style","flexDirection","fluid","childImageSharp","alt","dangerouslySetInnerHTML","__html","html","linkContainer","musicLink","to","target","pageQuery"],"mappings":"+EACAA,EAAOC,QAAU,CAAC,UAAY,mCAAmC,MAAQ,+BAA+B,KAAO,8BAA8B,QAAU,iCAAiC,IAAM,6BAA6B,cAAgB,uCAAuC,UAAY,qC,kCCD9R,gLAiFeC,UAtES,SAAC,GAAwB,IAAD,EAArBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SAAe,EACVC,IAAMC,UAAS,GAA5CC,EADuC,KAC3BC,EAD2B,KAGxCC,EAAeJ,IAAMK,OAAO,MAElCL,IAAMM,WAAU,WACd,GAAKF,EAAaG,QAAlB,CAEA,IAAMC,EAAsB,WAC1B,IAAMC,EAAOL,EAAaG,QAAQG,wBAC9BD,EAAKE,OAASF,EAAKG,MACrBT,GAAc,GAEdA,GAAc,IAOlB,OAHAK,IAEAK,OAAOC,iBAAiB,SAAUN,GAC3B,kBAAMK,OAAOE,oBAAoB,SAAUP,OACjD,CAACJ,EAAcD,IAElB,IAAMa,EAAOlB,EAAKmB,eACZC,EAAYpB,EAAKqB,KAAKC,aAAaC,MAEnCC,EAAK,UADIxB,EAAKyB,QAAQC,MACPC,MAAK,SAACC,GAAD,OAASA,EAAIC,KAAKC,OAASZ,EAAKa,YAAYC,mBAA3D,aAAG,EAAmEH,KAEjF,OACE,kBAAC,IAAD,CAAQ5B,SAAUA,EAAUsB,MAAOH,GACjC,kBAAC,IAAD,CAAKG,MAAOL,EAAKa,YAAYR,QAC7B,kBAAC,IAAD,CAAKtB,SAAUA,EAAUgC,MAAM,SAC/B,kBAAC,IAAD,CAAQhC,SAAUA,EAAUiC,UAAU,EAAMD,MAAM,OAAOE,MAAM,YAC/D,yBAAKC,IAAK9B,EAAc+B,UAAWC,IAAaC,WAC9C,wBAAIF,UAAWC,IAAaf,OAAQL,EAAKa,YAAYR,OACrD,uBAAGc,UAAWC,IAAaE,MACxBtB,EAAKa,YAAYS,KADpB,MAC6BtB,EAAKa,YAAYU,WAE9C,yBAAKJ,UAAWC,IAAaI,QAASC,MAAOvC,EAAa,CAAEwC,cAAe,UAAa,IACtF,kBAAC,IAAD,CAAKP,UAAWC,IAAaV,IAAKiB,MAAOrB,EAAMsB,gBAAgBD,MAAOE,IAAI,cAC1E,yBAAKC,wBAAyB,CAAEC,OAAQ/B,EAAKgC,SAE/C,yBAAKb,UAAWC,IAAaa,eAC3B,4CACe,IACb,kBAAC,OAAD,CACEd,UAAWC,IAAac,UACxBC,GAAG,mFACHC,OAAO,UAHT,YAQF,gDACmB,IACjB,kBAAC,OAAD,CAAMjB,UAAWC,IAAac,UAAWC,GAAG,sCAAsCC,OAAO,UAAzF,eAIF,6BACE,kBAAC,OAAD,CAAMjB,UAAWC,IAAac,UAAWC,GAAI,mBAA7C,gCAYL,IAAME,EAAS","file":"component---src-templates-release-js-0c9d41c6da05ec96713f.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"release-module--container--3LJ58\",\"title\":\"release-module--title--1Vdur\",\"date\":\"release-module--date--2Q-Rm\",\"content\":\"release-module--content--3BYi9\",\"img\":\"release-module--img--2piQm\",\"linkContainer\":\"release-module--linkContainer--27Ap9\",\"musicLink\":\"release-module--musicLink--ruSGY\"};","import React from 'react'\nimport { Link, graphql } from 'gatsby'\nimport Img from 'gatsby-image'\n\nimport releaseStyle from './release.module.css'\n\nimport Nav from '../components/Nav'\nimport Header from '../components/Header'\nimport Layout from '../components/Layout'\nimport SEO from '../components/SEO'\n\nconst ReleaseTemplate = ({ data, location }) => {\n  const [isVertical, setIsVertical] = React.useState(false)\n\n  const containerRef = React.useRef(null)\n\n  React.useEffect(() => {\n    if (!containerRef.current) return\n\n    const getLayoutDimensions = () => {\n      const rect = containerRef.current.getBoundingClientRect()\n      if (rect.height > rect.width) {\n        setIsVertical(true)\n      } else {\n        setIsVertical(false)\n      }\n    }\n\n    getLayoutDimensions()\n\n    window.addEventListener('resize', getLayoutDimensions)\n    return () => window.removeEventListener('resize', getLayoutDimensions)\n  }, [containerRef, setIsVertical])\n\n  const post = data.markdownRemark\n  const siteTitle = data.site.siteMetadata.title\n  const images = data.allFile.edges\n  const image = images.find((img) => img.node.name === post.frontmatter.coverImg)?.node\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <SEO title={post.frontmatter.title} />\n      <Nav location={location} theme=\"dark\" />\n      <Header location={location} showName={true} theme=\"dark\" color=\"#0f001a\" />\n      <div ref={containerRef} className={releaseStyle.container}>\n        <h1 className={releaseStyle.title}>{post.frontmatter.title}</h1>\n        <p className={releaseStyle.date}>\n          {post.frontmatter.date} - {post.frontmatter.albumType}\n        </p>\n        <div className={releaseStyle.content} style={isVertical ? { flexDirection: 'column' } : {}}>\n          <Img className={releaseStyle.img} fluid={image.childImageSharp.fluid} alt=\"Album Art\" />\n          <div dangerouslySetInnerHTML={{ __html: post.html }} />\n        </div>\n        <div className={releaseStyle.linkContainer}>\n          <div>\n            Available on{' '}\n            <Link\n              className={releaseStyle.musicLink}\n              to=\"https://open.spotify.com/artist/5tWnRXHI8g2I0adOEzNh7X?si=ikiZqJVGQDW_n1UVQvEUtA\"\n              target=\"_blank\"\n            >\n              Spotify\n            </Link>\n          </div>\n          <div>\n            Or find it on my{' '}\n            <Link className={releaseStyle.musicLink} to=\"https://soundcloud.com/garyanewsome\" target=\"_blank\">\n              Soundcloud\n            </Link>\n          </div>\n          <div>\n            <Link className={releaseStyle.musicLink} to={'/music/releases'}>\n              Return to Releases Page\n            </Link>\n          </div>\n        </div>\n      </div>\n    </Layout>\n  )\n}\n\nexport default ReleaseTemplate\n\nexport const pageQuery = graphql`\n  query ReleasePostBySlug($slug: String!) {\n    site {\n      siteMetadata {\n        title\n        author {\n          name\n          summary\n        }\n      }\n    }\n    markdownRemark(fields: { slug: { eq: $slug } }) {\n      id\n      excerpt\n      html\n      frontmatter {\n        title\n        date(formatString: \"MMMM DD, YYYY\")\n        albumType\n        coverImg\n      }\n    }\n    allFile(filter: { extension: { regex: \"/(jpg)|(jpeg)|(png)/\" }, sourceInstanceName: { eq: \"releaseImages\" } }) {\n      edges {\n        node {\n          id\n          name\n          extension\n          childImageSharp {\n            fluid {\n              base64\n              aspectRatio\n              src\n              srcSet\n              sizes\n            }\n          }\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}